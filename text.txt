Проектная работа «Закрывающий тег»
Это ваш последний проект по вёрстке — итог четырёх спринтов. Дальше вы углубитесь в программирование. 
В этой работе мы просим вас вспомнить и отрефлексировать пройденный к этому моменту путь, посмотреть на своё состояние и эмоции на разных этапах обучения.
Как обычно, в последнем уроке этой темы, «Сдача проектной работы», к вам в аккаунт GitHub автоматически скопируется стартовый репозиторий. Ознакомьтесь с описанием, чек-листом и получите заготовку. Потом вернитесь к этому уроку и приступайте к выполнению. 
Дел много, желаем удачи.
Шаг 1. Донастройте проект
В проекте две темы — светлая и тёмная. Укажите на это в специальном метатеге.
Скачайте из Figma необходимые изображения и SVG-файлы, оптимизируйте их, отформатируйте фавиконы под нужные размеры и форматы, разложите всё по папкам проекта. Подсказка на будущее — не скачивайте иконку с сердцем, её нужно использовать иначе.
Превратите SVG с изображением дискеты в symbol. Вам нужно будет использовать эту иконку так. И задайте настройку fill="currentColor". Так вы сможете менять её цвет в разных цветовых темах.
Добавьте в проект фавиконы и иконку для смартфонов.
Шаг 2. Шрифты
В архиве два шрифта — PressStart2P и Inter. Шрифт Inter вариативный, к нему особое внимание.
Опишите в файле fonts/fonts.css подключение обоих шрифтов. Подключая вариативный Inter, перечислите только те веса шрифта, которые используются в макете, в виде диапазона. Подсказка — проверяйте две цветовые схемы сайта, веса отличаются.
Задайте две переменные с именами этих шрифтов в файле styles/variables.css. Одну — для основного шрифта Inter, а другую — для акцентного PressStart2P. Основной шрифт можете смело применить к селектору .page, сославшись на переменную. Только не забудьте указать альтернативный системный шрифт.
Вес вариативного шрифта будет меняться между цветовыми схемами. В тёмной теме шрифт потолще, чтобы легче читалось. Удобно вынести в переменные толщину основного текста карточки и толщину заголовка карточки. В итоге у вас получится четыре переменные, связанные с типографикой. Основной вес шрифта применяйте к селектору .page через font-variation-settings.
Шаг 3. Основа для изменения цветовых тем
В цветовых темах меняются:
цвет фона,
акцентный цвет.
Ещё меняются цвета анимированных элементов и паттерны фона. О них позже. Сейчас создайте эти две переменные в файле styles/variables.css и задайте им исходные значения. Мы рекомендуем сделать основной темой светлую. Дальнейшие рекомендации написаны с опорой на это. 
В файле styles/themes.css переопределите значения этих переменных в селекторах :root.theme-dark и :root.theme-light на нужные. Заодно поменяйте значения переменных толщины шрифта. Не забудьте описать значения для пользовательского предпочтения тёмной темы.
Классы theme-dark и theme-light добавляются к тегу html скриптом в зависимости от выбранного переключателя в меню тем. Как только вы укажете для селектора .page свойства фона и цвета текста, сославшись на переменные, сможете проверить, что цветовые темы работают.
Результат на этом шаге
Шаг 4. Темизированный фавикон
Вы подключили к странице фавикон в формате SVG. Можно сделать так, чтобы при включённой в операционной системе светлой теме его цвет будет чёрным, а при включенной тёмной теме — акцентным зелёным. Это будет работать именно при переключении настроек на компьютере, но не в браузере. Чтобы так сделать, нужно писать стили прямо внутри SVG-файла. Добавьте внутри файла фавикона теги <style></style> и укажите там дефолтное свойство fill для всех кривых, а через медиазапрос пользовательских предпочтений переопределите fill для тёмной темы. Важно учесть, что вы не можете ссылаться на значения переменных, потому что ваш браузер скачивает весь файл целиком. Нужно указывать точные значения цветов для обоих случаев.
Шаг 5. Фоны
Значение для свойства background-image лучше хранить в отдельной переменной и менять между темами. Фон фиксирован, скроллится со всей страницей.
Фон должен постепенно увеличивать плотность цвета сверху вниз, поэтому нужно создавать градиенты.
Градиент потребуется сложный и множественный. Первый должен создавать повторяющиеся полоски слева направо, шириной в 2px. Одна полоска цветом #d3d3d3 в светлой теме (#000 —  в тёмной) и одна — прозрачная, такого же размера. Вспомните про repeating-linear-gradient, именно он вам нужен. 
Второй градиент — с такими же настройками из полос, но направление его должно идти сверху вниз. У вас получится своеобразная сетка из цветных и прозрачных линий. Последний градиент должен равномерно перетекать цветами сверху вниз. В светлой теме от цвета #e7e7e7 к #1a1a1a, а в тёмной теме — от #007f0c к #004306. Именно этот последний градиент создаст эффект изменения насыщенности цвета. В светлой теме мы немного продлили воздействие самого светлого оттенка и начали менять цвет от 0.01% всей высоты градиента, чтобы усилить эффект.
Чтобы такой фон из градиентов заливал всё пространство страницы, присвойте ему размер cover.
Шаг 6. Лейаут
У вас за плечами три проектные работы, по лейауту некоторые из них гораздо сложнее этого макета. Мы верим в вас, поэтому ограничимся небольшим количеством подсказок. В этой работе в основном практикуется создание анимаций, поэтому лейаут выбран не очень сложный.
Мы рекомендуем вам сначала создать одну карточку, а в конце работы над проектом размножить её. Так на этапе работы с анимациями и прочими эффектами у вас будет меньше HTML-кода, а значит в нём будет легче ориентироваться.
Ширина секций с контентом (шапка и карточки) резиновая, используйте clamp или относительные единицы, а на мобильном устройстве — растяните их на всю ширину. Для реализации этой ширины удобно внедрить дополнительный класс, а размер вынести в переменную.
Другие резиновые элементы — логотип, заголовок, отступы в шапке. Используйте clamp.
Чтобы символы < и > браузер не воспринимал как теги, используйте HTML-мнемоники &lt; и &gt;.
Для реализации стрелочки у меню опирайтесь на псевдокласс :disabled. Его подставляет скрипт к кнопке с активной темой. В шрифте есть спецсимвол с такой стрелочкой — ▶ . Используйте его в качестве значения content для псевдоэлемента.
Иконку с сердцем поместите внутрь тега <button>. Обратите внимание на комментарии в вашем прекоде, там описано, какие классы задать иконке. Если класс будет не тот, лайкнуть иконку не получится.
Содержимое кнопок Like и «Сохранить на память» поместите в <span> с отдельным классом button__text. Это поможет делать необходимые анимации.
Для иконки внутри кнопки «Сохранить на память» используйте тег use и опишите в SVG-файле symbol, а вот иконку сердца придётся вставить инлайново в код. Подробнее об этом в шаге с анимациями. Но на стадии вёрстки лейаута просто вставьте туда нужную SVG-иконку, чтобы прийти к неанимированному, визуально-похожему на макет результату. В вашей Figma эта иконка лежит отдельно от остальных, используйте её на этапе построения лейаута.

Единственный медиазапрос, касающийся ширины устройства, который использовали мы, — @media (width <= 375px). Его должно хватить. Да и стилей там переопределено совсем немного. Макет практически целиком резиновый.
Все состояния интерактивных элементов — ховеры и фокусы — оставьте на потом, их удобнее реализовывать вместе со всеми анимациями.
Шаг 7. Лейблы на карточках
Поверх каждой карточки должен появиться лейбл. Вот такой:

Для этого вокруг изображения придётся создать обёртку, в этом контейнере будет лежать изображение и текстовый элемент. Лейбл придётся правильно спозиционировать. А добиться нужного визуального эффекта поможет режим смешивания hard-light. Обратите внимание на обводку у текста. В разных цветовых темах её цвет различается. В этом спринте вы изучали, как делать такие обводки. Не забудьте проверить поддержку нужного свойства через @supports и сделать фоллбэк в виде text-shadow. Цвет обводки храните в отдельной переменной и меняйте его значение в различных цветовых схемах сайта.
Шаг 8. Анимации в шапке
В шапке несколько анимаций: двигающаяся стрелка около активного пункта меню, ховер на пункт меню, фокус на пункт меню, изменение состояния между enabled и disabled кнопкой.
Ховер и изменение состояния между enabled и disabled
По ховеру и в состоянии disabled кнопки становятся прозрачными, нужное значение — 0.6. Как и все анимации на сайте, изменение состояния должно быть плавным. У этих состояний переход длится 0.3s с функцией времени ease. Состояние disabled также должно делать кнопку неактивной для взаимодействия, добиться этого поможет pointer-events: none;.
Фокус на пункте меню
При фокусе на кнопку меню происходит плавное подчёркивание слева направо.
Создайте псевдоэлемент, который будет отрисовываться снизу. Плавности отрисовки можно добиться постепенным масштабированием (scale) этого элемента по оси X. Без cостояния focus-visible элемент масштабирован в 0, а в этом состоянии — 1. Настройки плавности такие же, как для состояния ховер.
Для состояния focus у кнопки сбросьте дефолтную обводку и назначьте такую же прозрачность, как при ховере.
Двигающаяся стрелка
Псевдоэлемент со стрелкой должен постоянно двигаться влево и вправо. Вот так:
Для этого напишите кифрейм, в первом кадре которого будет описан текущий сдвиг псевдоэлемента, а в финальном — сдвиг на 4 пикселя правее. После этого запустите анимацию на псевдоэлементе длительностью 0.5 секунды с функцией времени ease-in-out, сделайте её бесконечной и проигрывающейся в две стороны.
Шаг 9. Анимации кнопок
Кнопки анимируются при фокусе и ховере по-разному. Кроме того, анимация кнопок Like и «Сохранить на память» отличается от анимации кнопки, оборачивающей сердечко.
Кнопки Like и «Сохранить на память»
Сначала разберёмся с фокусами. В состоянии focus отмените стандартную обводку и добавьте тень блока. Основы работы с тенями вам уже знакомы. Нужная тень сдвинута на два пикселя по осям X и Y, с нулевым размытием, акцентного цвета. Для box-shadow нужно задать те же настройки плавности, которые вы дважды использовали в шапке.
По наведению на кнопку должен плавно слева направо выезжать псевдоэлемент. Добиться этого можно двумя путями: через scale от 0 до 1 или через translate от -100% по оси X до 0. Во втором случае кнопке придётся задать overflow.
Плавность здесь — 0.5s ease-in-out.
Нам хочется, чтобы текст перекрашивался постепенно, когда псевдоэлемент перекрывает его часть — меняется только эта часть текста.  Поможет режим смешивания difference. Но придётся правильно подобрать цвета. 
Чтобы текст оказался выше псевдоэлемента — сделайте вложенный в кнопку span относительно спозиционированным и при необходимости задайте z-index. В светлой теме напишите белым текстом по белому фону, режим смешивания поменяет белый цвет на противоположный — чёрный. А когда псевдоэлемент начнёт «наезжать» своим чёрным фоном, режим смешивания будет менять надпись на белую. В тёмной теме цвет текста должен быть акцентным, схема работы будет такой же. Для хранения цвета текста используйте переменные. В одной из кнопок у вас лежит иконка дискеты. Не забудьте применить режим смешивания и к ней.
Фокус на кнопке с сердцем
Для кнопки, оборачивающей сердце, описан только фокус. Все остальные состояния будут производиться на самой иконке внутри. В состоянии focus-visible у кнопки появляется рамка в два пикселя сплошной линией акцентного цвета. Не забудьте убрать обводку у состояния focus. Граница должна появляться плавно: 0.3s ease. А высота блока должна быть такой же, как у кнопки справа. Проследите за размерами. Скорее всего, вам придётся задать прозрачную границу у элементов без фокуса и менять только цвет границы у элемента в фокусе.
Шаг 10. Анимация иконки сердца. Подготовка SVG
Для того чтобы разобраться с анимацией сердца, нужно внимательно посмотреть на структуру его svg-кода и даже немного подредактировать его.
Посмотрим в Figma:
Сердцевина, основное тело, контур и искры вокруг разложены на отдельные слои. За это нужно благодарить дизайнера. Часто в рабочей ситуации всё не так удобно, приходится самим выискивать кривые через инструменты разработчика и раскладывать их по нужным слоям. Если скачать или скопировать svg-код фрейма heart in paths, увидим внутри тега svg четыре тега path и некоторый мусор, его нужно почистить перед дальнейшей работой.
Замените этим кодом без всего лишнего ту иконку, которую использовали до этого. Не забудьте добавить этому svg класс like-icon.
Все будущие анимации строятся на том, чтобы перекрашивать или масштабировать разные path в этом svg, поэтому следующим этапом каждый path хорошо бы назвать своим именем класса.
Удобно смотреть на кривые через инструменты разработчика, чтобы понять, какая за что отвечает, и называть их. Мы выбрали такие имена классов и дальше будем пользоваться ими:
core — сердцевина;
contour — контур;
main-body — основное тело сердца;
sparks — искры вокруг.
Ещё в рамках одной из анимаций вам нужно будет увеличить всё сердце, но без искр. Поэтому лучше объединить core, contour и main-body в группу с классом heart, для этого используйте контейнер <g></g>.
Внутри видимой в исходном состоянии группы с сердцем должен остаться только контур. Поэтому замените значения цветов в атрибутах везде, кроме контура, на none.
В светлой теме получится так:

Цвет контура выносите в переменную, потому что он меняется в светлой и тёмной темах. Вы можете указывать ссылку на переменную прямо в атрибуте fill. Вот так: fill="var(--name)". Значение этой переменной задайте разное в тёмной и светлой темах.
Удобно, когда все нужные цвета лежат в переменных. Одна у вас уже есть — контур, второй переменной будет цвет заливки. Он один — красный. Задайте такую переменную и укажите в качестве значения fill для искр.
💡 Мы могли бы скрыть искры, указав fill: none;, это тоже хороший подход, но мы предпочли скрыть их через opacity в CSS. Подходы равноценны, но нам показалось, что в приведённых анимациях смысл в том, чтобы искры появлялись, становились видимыми, а не приобретали цвет. На самом деле не имеет значения, как именно скрыть искры.
Вот результат, который у вас должен получиться. Сердцевина и основное тело не залиты цветом, заливка контура ссылается на переменную, заливка искр ссылается на переменную, искрам задана прозрачность в CSS.
Шаг 11. Анимация сердца
Сердце анимируется в трёх состояниях: при ховере (и наоборот, когда уводим курсор), при нажатии и удержании (в состоянии :active), при клике. Для реализации придётся написать достаточно много кода, но получится круто. Для более удобной работы мы рекомендуем вынести цвета контура и заливки в отдельные переменные и использовать их в коде.
:hover
При наведении на иконку сначала закрашивается акцентным цветом сердцевина, а потом основное тело. Все анимации на ховере производятся в линейное время, а вот с длительностью и задержкой нужно разбираться отдельно.
Для этой анимации не нужны кифреймы. Просто опишите плавность изменения значения fill для нужных элементов иконки. Меняйте значение у сердцевины сразу же при наведении мышки и в течение 0.3s. А в обратной ситуации, когда курсор уходит, — с задержкой в 0.03s, ведь вам нужно будет дождаться, когда потухнет основное тело. Временные интервалы будут идти немного внахлёст, это создаст нужное ощущение плавности. Основное тело сердца при наведении курсора перекрашивайте с задержкой в 0.05s в течение 0.3s. А когда курсор уходит с сердца, основное тело, наоборот, становится прозрачным без задержек и перекрашивается всё те же 0.3s. Обратите внимание, что вся заливка при наведении происходит цветом контура.
:active
При нажатии и удержании кнопки мышки сердцевина и основное тело сердца закрашиваются основным цветом анимации — красным. Контур не перекрашивается. Когда вы отпускаете кнопку, происходит клик, но это уже другая анимация.
Чтобы добиться такого эффекта при зажатии, вам нужно прописать абсолютно такие же настройки transition, как и для эффекта по наведению, но поменять цвет на красный.
Клик по иконке
Как только по иконке происходит клик, скрипт добавляет в код иконки дополнительный класс is-liked, а при повторном клике убирает его. Это позволит вам создавать селекторы вроде .like-icon.is-liked .contour и описывать анимацию для них. Вот что происходит при клике:
Закрашивается сердцевина.
С небольшой задержкой закрашивается основное тело.
Еще с большей задержкой закрашивается контур.
Происходит небольшое масштабирование сердца и возврат к исходному масштабу.
Становятся видимыми и пропадают искры.
Цвет заливки во всех случаях красный. А время задержек не описывает завершение предыдущего шага. Мы всего лишь начинаем анимации чуть позже, чтобы каждая из них пришла в финальное состояние уже после завершения предыдущей. Так получается визуальная плавность.
Вот замедленное покадровое видео, на нём легче рассмотреть детали.
Перекрашивать сердцевину и основное тело вы уже умеете. Абсолютно те же самые параметры, что и при состоянии active. После этого с небольшой задержкой в 0.06s перекрашивайте контур. Длительность всех анимаций — 0.3s.
Для того чтобы масштабировать сердце и сделать вспышку искр, придётся написать два кифрейма. Первый — масштабирование с 1 до 1.5. Эту анимацию нужно запустить на всей группе элементов .heart через 0.1s после появления класса is-liked в разметке. Длиться масштабирование должно 0.3s с плавностью ease-in, происходить однажды, но в две стороны — от начала к концу и обратно.
Кифрейм для искр — изменение прозрачности или заливки (как вам удобно). Эта анимация длится 0.3s  и запускается через 0.3s однажды, с плавностью ease-in, в две стороны.
Последний штрих — предусмотреть перекрашивание контура обратно, когда сердечко выключат. Контур лучше возвращать на место побыстрее — линейно, за 0.1s, без задержек.  
Шаг 12. Диалог
Кнопка «Сохранить на память» должны вызывать модальное окно. Используйте для его появления изученный в этом спринте элемент dialog. При вёрстке содержимого этого окна используйте повторно изображение дискеты и стили кнопок во всем макете. Чтобы сверстать две колонки внутри модального окна, вы, скорее всего, захотите изменить в нём значение display. Воздействие на display всей модалки повлияет на возможности скрывать и показывать её, ведь по умолчанию у элемента dialog предустановленное значение display. 
Чтобы избежать этой проблемы, меняйте свойство display у диалога только в состоянии opened. Не забудьте также стилизовать задний слой у открытого модального окна. Для этого придуман псевдоэлемент backdrop. Закрываться модальное окно должно по кнопке Ок.
Шаг 13. Ваш контент
Сделайте на этом шаге восемь одинаковых карточек, добавьте к ним нужные отступы и вставьте в каждую тексты из макета.
Время для творчества. Пожалуйста, подберите картинки в каждую из восьми карточек и напишите немного личного текста вместо текста: Место для .... Подумайте о том пути, который уже прошли, о трудностях, с которыми справились. Нам будет очень интересно прочитать ваши мысли. Будет здорово, если вы поделитесь фотографиями из личного архива или подберёте что-то по настроению на https://unsplash.com/ или https://giphy.com/. Не сдерживайте себя!
Вместо лейблов внутри карточки подберите одно или два слова, которыми можете охарактеризовать своё состояние в каждой из описанных точек курса.
Шаг 14. Фильтры
На каждое из изображений добавьте дополнительный уникальный класс и стилизуйте CSS-фильтром, который ещё сильнее подчеркнёт вашу задумку и передаст нужную эмоцию. Минимум на семи картинках должны быть разные фильтры и хотя бы один из них — множественный.
Шаг 15. Опубликуйте сайт
Когда всё будет готово, кроме отправки проекта на работу ревьюеру через Pull Request, зайдите в настройки Settings вашего проекта на GitHub.

В левой панели перейдите во вкладку Pages.

В выпадающем списке Branсh, выберите ту ветку, в которой работали, и нажмите Save.

Через какое-то время GitHub опубликует ваш сайт, а рядом с этим блоком появится ссылка на него. Если ссылка не откроется, напишите в конце адреса /index.html. Иногда требуется показать более явно, какую страницу открыть. Поделитесь этой ссылкой в чате с вашими одногруппниками, куратором и наставником. Покажите друзьям и близким. Пожалуйста, не стесняйтесь. Теперь вы умеете круто верстать, это большой шаг, это вдохновляе